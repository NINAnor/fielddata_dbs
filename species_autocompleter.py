#!/usr/bin/env python
#
#############################################################################
# AUTHOR(S): Stefan Blumentrath
# PURPOSE: Autocomplete species names entered in a custom fom in QGIS
# COPYRIGHT: (C) 2015 by the Stefan Blumentrath
#
# This program is free software under the GNU General Public
# License (>=v2).
#############################################################################
#
# This Python script implements an autocompleter in a custom
# QGIS form for species names based on an official list of 
# species names from Artsdatabanken. The latter is regularly
# (every sunday) updated.
#
# At the moment only custom forms made with Qt Designer
# are suported.
#
# This autocompleter requires the field "latinsk_navn",
# which will have to be adjusted to the name of the 
# relevant field in other use cases.
# Furthermore, the SQL query whch fetches the items 
# for the autocompleter only fetches names of fungi
# Because the MATERIALIZED VIEW only contains fungi.
# In other cases this can easily be adjusted.
# 
#
# To do`s:
# - Implement validation of species names
#   (see: http://nathanw.net/2011/09/05/qgis-tips-custom-feature-forms-with-python-logic/)
# - Interaction with other information on the form (f.eks. norsk navn)
#   (SIGNALs and SLOTs)
# - find a solution for for using this function on autogenerated forms

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtSql import *
import psycopg2

nameField = None
myDialog = None

def formOpen(dialog,layerid,featureid):
    global myDialog
    myDialog = dialog
    global nameField
    nameField = dialog.findChild(QLineEdit,"latinsk_navn")
    
    #Initiate completer
    completer = QCompleter()
    nameField.setCompleter(completer)
    
    #Fetch data from DB to fill completer
    conn = psycopg2.connect("dbname='MYDB' user='MYUSERNAME' host='MYHOST' password='MYPASSWD'")
    cur = conn.cursor()
    cur.execute("""SELECT scientificname FROM kls.l_artsliste WHERE finnesinorge = 'Ja'""")
    completition_items = []
    for row in cur.fetchall():
        completition_items.append(row[0])
    
    #Add data to Qt Model / QCompleter
    model = QStringListModel()
    model.setStringList(completition_items)
    completer.setModel(model)
